cacheSolve (testo)
testo
testo$get
testx <- matrix(testo)
print testx
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
load("~/TSM Stats/.RData")
plot(x,y)
xlab <- "time "
plot(x,y)
plot(x,y)
plot(x,y,xlab)
plot(x,y,xlab = "time ")
plot(x,y,xlab = "time ", ylab = "backup (GB) ")
plot(x,y,xlab = "time ", ylab = "backup (GB) ")
?lm
abline(lm(y~x), col="red")
plot(x,y,xlab = "time ", ylab = "retained backup (GB) ")
abline(lm(y~x), col="red")
plot(x,y,xlab = "time ", ylab = "retained backup (GB) ")
abline(lm(y~x), col="red")
?rnorm
fs.capacity = rnorm (1, mean= 0.5)
fs.capacity = rnorm (1:100, mean= 0.5)
print (fs)
print (fs.capacity)
summary(fs.capacity)
rm(fs.capacity)
fs.sample <- fs.capacity * runif(1, 0.1 , 0.7)
fs.capacity <- 100000000000.0
fs.sample <- fs.capacity * runif(1, 0.1 , 0.7)
fs.sample <- sa.integer(fs.capacity * runif(1, 0.1 , 0.7))
fs.sample <- as.integer(fs.capacity * runif(1, 0.1 , 0.7))
fs.sample <- round((fs.capacity * runif(1, 0.1 , 0.7)))
source('~/TSM Stats/fsattime.R')
source('~/TSM Stats/fsattime.R')
source('~/TSM Stats/fsattime.R')
fsattime(10, 100, 1)
source('~/TSM Stats/fsattime.R')
fsattime(10, 100, 10, 1)
source('~/TSM Stats/fsattime.R')
fsattime(10, 100, 10, 1)
fsattime(10, 100, 10, 1)
fsattime(1:10, 100, 10, 1)
fsattime(1:10, 100, 10, 10)
fsattime(10, 100, 10, 10)
)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(1, -0.25, 0.25)
runif(10, -0.25, 0.25)
fsattime(10, 100, 10, .10)
fsattime(10, 100, 10, .30)
source('~/TSM Stats/fsattime.R')
fsattime(10, 100, 10, .30)
fsattime(1, 100, 10, .30)
fsattime(2, 100, 10, .30)
fsattime(3, 100, 10, .30)
fsattime(3, 100, 10, .30/365)
fsattime(270, 100, 10, .30/365)
fsattime(1000, 100, 10, .30/365)
fsattime(1, 100, 10, .30/365)
source('~/TSM Stats/fsattime.R')
fsattime(1, 100, 10, .30/365)
fsattime(123, 100, 10, .30/365)
fsattime(145, 100, 10, .30/365)
fsattime(200, 100, 10, .30/365)
fsattime(200, 100, 50, .30/365)
source('~/TSM Stats/fsattime.R')
fsattime(200, 100, 50, .30/365)
source('~/TSM Stats/fsattime.R')
fsattime(200, 100, .30/365, 50)
fsattime(200, 100, .30/365, 50)
fsattime(200, 100, .30/365, 50)
fsattime(200, 100, .30/365, 50)
fsattime(1:1000, 100, .30/365, 50)
fsattime(1, 100, .30/365, 50)
?lapply
?replicate
rm(e)
rm(fs.capacity)
rm(fs.sample)
rm(x)
rm(xlab)
rm(y)
fsattime(1, 100, .30/365, 50)
fsattime(400, 100, .30/365, 50)
?for
?
?whi;e
?whi;e
?while
?
for(i in 1:5) print(1:i)
source('~/TSM Stats/fsattime.R')
install.packages("xlsx")
library("xlsx", lib.loc="~/R/win-library/3.1")
library("rJava", lib.loc="~/R/win-library/3.1")
library("xlsxjars", lib.loc="~/R/win-library/3.1")
install.packages("xlsx")
load("~/Coursera/getdata-005/week 1/.RData")
library("xlsx", lib.loc="~/R/win-library/3.1")
xlworkbook <- loadWorkbook("C:/Users/Ken Bury/Documents/Coursera/getdata-005/week 1/getdata.xlsx")
xlworkbook$getNumberOfSheets()
sheet <- getSheets(xlworkbook)[1]
sheet <- getSheets(xlworkbook)[[1]]
ranges <- getRanges(xlworkbook)
firstCell <- sheet$getRow(18L)$getCell(7L)
lastCell <- sheet$getRow(23L)$getCell(15L)
lastCell <- sheet$getRow(23L)$getCell(15L)
rangeName <- "getdata"
firstCell <- sheet$getRow(18L)$getCell(7L)
lastCell <- sheet$getRow(23L)$getCell(15L)
createRange(rangeName, firstCell, lastCell)
rows <- getrows (sheet, 18:23)
rows <- getRows (sheet, 18:23)
cells <- getCells (rows, 7:15)
file <- "C:/Users/Ken Bury/Documents/Coursera/getdata-005/week 1/getdata.xlsx"
sheetIndex <- 1
rowIndex < 18:23
rowIndex <- 18:23
colIndex <- 7:17
colIndex <- 7:15
dat <- read.xlsx (file, rowIndex, colIndex)
dat <- read.xlsx (file, sheetIndex, rowIndex, colIndex)
dat <- read.xlsx (file, sheetIndex = 1, rowIndex, colIndex)
dat <- read.xlsx (file, sheetIndex = [1], rowIndex, colIndex)
dat <- read.xlsx (file, sheetIndex, rowIndex, colIndex)
sheetIndex <- [1]
sheetIndex <- "1"
dat <- read.xlsx (file, sheetIndex, rowIndex, colIndex)
dat <- read.xlsx (file, 1 , rowIndex, colIndex)
rm(sheetIndex)
dat <- read.xlsx (file, 1 , rowIndex, colIndex)
dat <- read.xlsx (file, rowIndex, colIndex)
dat <- read.xlsx (file, 1)
View(dat)
View(dat)
dat <- read.xlsx (file, 1, rowIndex)
sheetName = ""
dat <- read.xlsx (file, 1, rowIndex)
sheetName = "1"
dat <- read.xlsx (file, 1, rowIndex)
dat <- read.xlsx (file,  rowIndex)
sheetIndex <- getSheets(xlworkbook)[1]
dat <- read.xlsx (file, sheetIndex, rowIndex)
sheetIndex <- getSheetNames(xlworkbook)[1]
sheetIndex <- getSheets(xlworkbook)
rm(sheetName)
dat <- read.xlsx (file, 1, rowIndex)
dat <- read.xlsx2 (file, 1, rowIndex)
dat <- read.xlsx2 (file,  rowIndex)
dat <- read.xlsx2 (file, sheet = 1, rowIndex)
dat <- read.xlsx (file, sheet = 1, rowIndex)
wb <- loadWorkbook("C:/Users/Ken Bury/Documents/Coursera/getdata-005/week 1/getdata.xlsx")
sheet <- getSheets(xlworkbook)[1]
dat <- readColumns(sheet, startColumn = 7, endColumn = 15, startRow = 18, endRow= 23)
dat <- readColumns(sheet)
sheet <- getSheets(wb)[1]
dat <- readColumns(sheet, startColumn = 7, endColumn = 15, startRow = 18, endRow= 23)
sheet <- getSheets(wb)
dat <- readColumns(sheet, startColumn = 7, endColumn = 15, startRow = 18, endRow= 23)
dat <- readColumns(sheet, startColumn = 7, endColumn = 15, startRow = 18, endRow= 23)
sheets <- getSheets(wb)
sheet <- sheets[[1]]
dat <- readColumns(sheet, startColumn = 7, endColumn = 15, startRow = 18, endRow= 23)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library("XML", lib.loc="~/R/win-library/3.1")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
fileURL <- "C:/Users/Ken Bury/Documents/Coursera/getdata-005/week 1/restaurants.xml"
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]]
names(rootNode)
top <- xmlRoot(doc)
xmlName(top)
names(top)
names(top[[1]])
names(top[[1]]["row"]
)
rest <- names(top[[1]]["row"])
rest <- names(top[[1]][["row"])
rest <- names(top[[1]][["row"]])
names(rest)
names(rest["zipcode"]
)
names(rest[["zipcode"]])
names(rest["zipcode"])
xmlSApply(rest[[1]], xmlValue)
xmlSApply(rest[["zipcode"]], xmlValue)
rest[[1]]
rest[[2]]
xmlSApply(rest[[2]], xmlValue)
xmlSApply(rest[[2]], xmlChar)
xmlSApply(rest[[2]], xmlName)
rest <- top[[1]][["row"]]
xmlSApply(rest[[2]], xmlName)
xmlSApply(rest[[2]], xmlValue)
xmlSApply(rest[["zipcode"]], xmlValue)
xmlSApply(rest, function(x) xmlSApply(x, xmlValue))
dat <- xmlSApply(rest, function(x) xmlSApply(x, xmlValue))
install.packages("data.table")
library("data.table", lib.loc="~/R/win-library/3.1")
nodes = getNodeSet(rest,"@zipcode='']")
DT <- fread("C:/Users/Ken Bury/Documents/Coursera/getdata-005/week 1/ss06pid.csv")
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(test <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT[,mean(pwgtp15),by=SEX]
load("~/Coursera/getdata-005/Week 2/.RData")
source('~/Coursera/getdata-005/Week 2/kengithub.R')
print(Sys.setenv(GITHUB_CONSUMER_SECRET = "e50c23500934278a6a5f441d74d3444a23712b23"))
source('~/Coursera/getdata-005/Week 2/kengithub.R')
source('~/Coursera/getdata-005/Week 2/kengithub.R')
source('~/Coursera/getdata-005/Week 2/kengithub.R')
source('~/Coursera/getdata-005/Week 2/kengithub.R')
q()
setwd("~/GitHub/ExData_Plotting1")
pdata$DateTime <- strptime(paste(as.character(pdata$Date)," ",as.character(pdata$Time)), "%d/%m/%Y %H:%M:%S")
spdata <- subset (pdata, DateTime >= as.POSIXlt( "2007-02-01 00:00:00") & DateTime <= as.POSIXlt( "2007-02-02 00:00:00"))
pdata <- read.table("./household_power_consumption.txt",header= TRUE , sep = ";", na.strings = c("?"))
## pdata <- read.table("./household_power_consumption.txt",header= TRUE , sep = ";")
pdata$DateTime <- strptime(paste(as.character(pdata$Date)," ",as.character(pdata$Time)), "%d/%m/%Y %H:%M:%S")
spdata <- subset (pdata, DateTime >= as.POSIXlt( "2007-02-01 00:00:00") & DateTime <= as.POSIXlt( "2007-02-02 00:00:00"))
with (spdata, plot (DateTime, Global_active_power))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" ))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" ))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" ))
lines()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" ))
lines(DateTime)
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" ))
dev.copy(png, file = "plot2.png")
dev.off()
with (spdata, plot (DateTime, Sub_metering_1,Sub_metering_2,Sub_metering_3, ylab = "Energy sub metering" ))
dev.copy(png, file = "plot3.png")
dev.off()
with (spdata, plot (DateTime, Sub_metering_1,Sub_metering_2,Sub_metering_3, ylab = "Energy sub metering" ))
spdata <- subset (pdata, DateTime >= as.POSIXlt( "2007-02-01 00:00:00") & DateTime <= as.POSIXlt( "2007-02-02 00:00:00"))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" ))
lines (spdata$Global_active_power)
# draw a smooth line through a scatter plot
plot(cars, main = "Stopping Distance versus Speed")
lines(stats::lowess(cars))
spdata <- subset (pdata, DateTime >= as.POSIXlt( "2007-02-01 00:00:00") & DateTime <= as.POSIXlt( "2007-02-02 00:00:00"))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
dev.copy(png, file = "plot2.png")
dev.off()
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering" ))
lines(DateTime, Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering" ))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend(c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3" ,col=c("black", "red" , "blue")))
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering" ))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering" ))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.copy(png, file = "plot3.png")
dev.off()
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering" , width=480, height=480))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering" , width=480, height=480))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.copy(png, file = "plot4.png")
png() file = "plot4.png",width=480,height=480,res=72)
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
png( file = "plot4.png",width=480,height=480,res=72)
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
png( file = "plot2.png",width=480,height=480,res=72)
spdata <- subset (pdata, DateTime >= as.POSIXlt( "2007-02-01 00:00:00") & DateTime <= as.POSIXlt( "2007-02-02 00:00:00"))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
dev.off()
png( file = "plot1.png",width=480,height=480,res=72)
hist(spdata$Global_active_power, breaks=12, col="red", main= "Global Active Power", xlab = "Global Active Power (kilowatts)" )
dev.off()
png( file = "plot3.png",width=480,height=480,res=72)
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering" ))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
device()
devices
devices()
??dev.off()
dev.cur()
par (mfrow = c(2,2))
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
par (mfrow = c(2,2))
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
par (mfrow = c(2,2))
hist(spdata$Global_active_power, breaks=12, col="red", main= "Global Active Power", xlab = "Global Active Power (kilowatts)" )
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
par (mfrow = c(2,2))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
par (mfrow = c(2,2))
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
with (spdata, plot (DateTime, Voltage,  type ="l" ))
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
dev.off()
par (mfrow = c(2,2))
## 1,1 plot
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
## 1,2 plot
with (spdata, plot (DateTime, Voltage,  type ="l" ))
## 2,1 plot
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
## 2,2 plot
with (spdata, plot (DateTime, Global_reactive_power,  type ="l" ))
dev.off()
png( file = "plot4.png",width=480,height=480,res=72)
par (mfrow = c(2,2))
## 1,1 plot
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
## 1,2 plot
with (spdata, plot (DateTime, Voltage,  type ="l" ))
## 2,1 plot
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
## 2,2 plot
with (spdata, plot (DateTime, Global_reactive_power,  type ="l" ))
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
dofwlabels <- weekdays(spdata$DateTime)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
dofwlabels <- weekdays(spdata$DateTime)
axis(1, xaxp=dofwlabels)
axis(1, xaxp=dofwlabels, las=2)
axis(1, labels=dofwlabels)
axis(1, at=spdata$DateTime, labels=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xatx ="n" ))
dofwlabels <- weekdays(spdata$DateTime)
axis(1, at=spdata$DateTime, labels=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xatx ="n" ))
dofwlabels <- weekdays(spdata$DateTime)
axis(1, at=1:nrow(spdata), labels=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
dofwlabels <- weekdays(spdata$DateTime)
axis(1, at=1:nrow(spdata), labels=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
dofwlabels <- weekdays(spdata$DateTime)
axis(1, at=1:nrows(spdata), labels=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
dofwlabels <- weekdays(spdata$DateTime)
axis(1, at=1:nrow(spdata), labels=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt="n" ))
dofwlabels <- weekdays(spdata$DateTime)
axis(1, at=1:nrow(spdata), labels=dofwlabels)
axis(1, at=spdata$DateTime, format"%A")
axis(1, at=spdata$DateTime, format="%A")
axis.POSIXlt(1, at=spdata$DateTime, format="%A")
axis.POSIXct(1, at=spdata$DateTime, format="%A")
axis.POSIXct(1, at=1:3, format="%A")
axis.POSIXct(1, at= NULL, format="%A")
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt="n" ))
dofwlabels <- unique(weekdays(spdata$DateTime))
axis(1, at=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt="n" ))
dofwlabels <- unique(weekdays(spdata$DateTime))
axis(1, labels=dofwlabels)
axis(1, at = 1:3 ,labels=dofwlabels)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt="n" ))
axis(1, at = 1:3 ,labels=c("Thu", "Fri", "Sat"))
axis(1, at = 1:3 ,labels=c("Thu", "Fri", "Sat"))
ticksX <- seq (0,3,1)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt="n" ))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt= NULL ))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l"  ))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l"  ))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , axes = FALSE ))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
?axis.date
??axis.date
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ,xatx = "n"))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xatx = "n"))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt = "n"))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt = "n"))
ticksX <- seq (0,2,1)
LabelsX <- c("Thu", "Fri", "Sat")
axis(1, at = ticksX ,labels=LabelsX)
ticksX <- seq (spdata$DateTime[1], spdata$DateTime[1441], by = "day")
ticksX <- seq (spdata$DateTime[1], spdata$DateTime[1441], by = "weekday")
ticksX <- seq (spdata$DateTime[1], spdata$DateTime[1441], by = 1)
ticksX <- seq (spdata$DateTime[1], spdata$DateTime[1441], by = "days")
dev.off()
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
axis(1, spdata$DateTime, format(spdata$DateTime, "%b %d"), cex.axis = .7)
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" , xaxt="n"))
axis(1, as.Date(spdata$DateTime), format(as.Date(spdata$DateTime), "%b %d"), cex.axis = .7)
png( file = "plot4.png",width=480,height=480,res=72)
par (mfrow = c(2,2))
## 1,1 plot
with (spdata, plot (DateTime, Global_active_power, ylab = "Global Active Power (kilowatts)" , type ="l" ))
## 1,2 plot
with (spdata, plot (DateTime, Voltage,  type ="l" ))
## 2,1 plot
with (spdata, plot (DateTime, Sub_metering_1, type ="l" , ylab = "Energy sub metering"))
lines(spdata$DateTime, spdata$Sub_metering_2, col="red")
lines(spdata$DateTime, spdata$Sub_metering_3, col="blue")
legend("topright", c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty=1, col=c("black", "red" , "blue"))
## 2,2 plot
with (spdata, plot (DateTime, Global_reactive_power,  type ="l" ))
dev.off()
